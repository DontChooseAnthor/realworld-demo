// Code generated by ent, DO NOT EDIT.

package ent

import (
	"realworld/ent/article"
	"realworld/ent/schema"
	"realworld/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescCreatedAt is the schema descriptor for created_at field.
	articleDescCreatedAt := articleFields[5].Descriptor()
	// article.DefaultCreatedAt holds the default value on creation for the created_at field.
	article.DefaultCreatedAt = articleDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.DefaultPassword holds the default value on creation for the password field.
	user.DefaultPassword = userDescPassword.Default.(string)
	// userDescLevel is the schema descriptor for level field.
	userDescLevel := userFields[3].Descriptor()
	// user.DefaultLevel holds the default value on creation for the level field.
	user.DefaultLevel = userDescLevel.Default.(uint32)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescPoints is the schema descriptor for points field.
	userDescPoints := userFields[7].Descriptor()
	// user.DefaultPoints holds the default value on creation for the points field.
	user.DefaultPoints = userDescPoints.Default.(uint32)
}
